# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
        platform: [cpu, gpu]
        include:
          - platform: cpu
            runs-on: ubuntu-latest
            jax-platform: cpu
          - platform: gpu
            runs-on: ubuntu-latest
            jax-platform: cuda
    
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Setup GPU (if needed)
      if: matrix.platform == 'gpu'
      uses: Jimver/cuda-toolkit@v0.2.14
      with:
        cuda: '12.1.0'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest pytest-cov
        # Install git so we can install from git repositories
        sudo apt-get update && sudo apt-get install -y git
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        # Install the package with dev dependencies
        pip install -e ".[dev]"
    
    - name: Configure JAX Platform
      run: |
        echo "JAX_PLATFORMS=${{ matrix.jax-platform }}" >> $GITHUB_ENV
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      run: |
        python -m pytest tests/ --cov=qem --cov-report=xml -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
        fail_ci_if_error: false
        flags: ${{ matrix.platform }}_py${{ matrix.python-version }}
        name: ${{ matrix.platform }}-python${{ matrix.python-version }}
        verbose: true
